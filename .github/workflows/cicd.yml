name: Build, Push & Deploy (api + frontend)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  K8S_NAMESPACE: gv
  K8S_MANIFEST_DIR: infrastructure

jobs:
  build-api:
    runs-on: ubuntu-latest
    outputs:
      IMAGE_REF: ${{ steps.out.outputs.IMAGE_REF }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ensure we always use a lowercase owner for GHCR image paths
      - name: Owner (lowercase)
        id: owner
        run: echo "OWNER_LC=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_OUTPUT

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Calc short SHA
        id: sha
        run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Docker metadata (api)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ steps.owner.outputs.OWNER_LC }}/gemeindeverzeichnis-api
          tags: |
            type=raw,value=latest
            type=raw,value=${{ steps.sha.outputs.SHORT_SHA }}

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & push API
        uses: docker/build-push-action@v6
        with:
          context: ./apps/api
          file: ./apps/api/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Output image ref (api)
        id: out
        run: echo "IMAGE_REF=ghcr.io/${{ steps.owner.outputs.OWNER_LC }}/gemeindeverzeichnis-api:${{ steps.sha.outputs.SHORT_SHA }}" >> $GITHUB_OUTPUT

  build-frontend:
    runs-on: ubuntu-latest
    outputs:
      IMAGE_REF: ${{ steps.out.outputs.IMAGE_REF }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Owner (lowercase)
        id: owner
        run: echo "OWNER_LC=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_OUTPUT

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Calc short SHA
        id: sha
        run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Docker metadata (frontend)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ steps.owner.outputs.OWNER_LC }}/gemeindeverzeichnis-frontend
          tags: |
            type=raw,value=latest
            type=raw,value=${{ steps.sha.outputs.SHORT_SHA }}

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & push Frontend
        uses: docker/build-push-action@v6
        with:
          context: ./apps/frontend
          file: ./apps/frontend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Output image ref (frontend)
        id: out
        run: echo "IMAGE_REF=ghcr.io/${{ steps.owner.outputs.OWNER_LC }}/gemeindeverzeichnis-frontend:${{ steps.sha.outputs.SHORT_SHA }}" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy to Kubernetes
    needs: [ build-api, build-frontend ]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout (for manifests)
        uses: actions/checkout@v4

      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.29.0'

      - name: Configure kubeconfig
        run: |
          set -euo pipefail
          install -d -m 700 ~/.kube
          printf "%s" "${KUBE_CONFIG}" > ~/.kube/config
          chmod 600 ~/.kube/config
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}

      # Optional: Helm installs for charts if you use your *values.yaml*
      # - name: Helm install/upgrade (Traefik / Postgres)
      #   run: |
      #     helm repo add traefik https://traefik.github.io/charts
      #     helm repo add bitnami https://charts.bitnami.com/bitnami
      #     helm repo update
      #     helm upgrade --install traefik traefik/traefik -n "${K8S_NAMESPACE}" -f "${K8S_MANIFEST_DIR}/traefik-values.yaml" --create-namespace
      #     helm upgrade --install postgres bitnami/postgresql -n "${K8S_NAMESPACE}" -f "${K8S_MANIFEST_DIR}/pg-values.yaml"

      - name: Apply manifests (skip values & kubeconfig files)
        env:
          K8S_NAMESPACE: ${{ env.K8S_NAMESPACE }}
          K8S_MANIFEST_DIR: ${{ env.K8S_MANIFEST_DIR }}
        run: |
          set -euo pipefail
          find "${K8S_MANIFEST_DIR}" -type f -name '*.y*ml' \
            ! -name '*values.yaml' \
            ! -name 'kubeconfig*.y*ml' \
            -print0 | xargs -0 -n1 kubectl apply -n "${K8S_NAMESPACE}" -f

      - name: Set image for API (with timeout)
        run: |
          set -euo pipefail
          kubectl set image deployment/gemeindeverzeichnis-api api=${{ needs.build-api.outputs.IMAGE_REF }} -n ${{ env.K8S_NAMESPACE }}
          kubectl rollout status deployment/gemeindeverzeichnis-api -n ${{ env.K8S_NAMESPACE }} --timeout=180s

      - name: Set image for Frontend (with timeout)
        run: |
          set -euo pipefail
          kubectl set image deployment/gemeindeverzeichnis-frontend web=${{ needs.build-frontend.outputs.IMAGE_REF }} -n ${{ env.K8S_NAMESPACE }}
          kubectl rollout status deployment/gemeindeverzeichnis-frontend -n ${{ env.K8S_NAMESPACE }} --timeout=180s

      - name: Trigger gv-100-importer once (now)
        run: |
          set -euo pipefail
          ts=$(date +%s)
          kubectl -n ${{ env.K8S_NAMESPACE }} create job gv-100-importer-now-${ts} --from=cronjob/gv-100-importer

      - name: Trigger paddle-importer once (now)
        run: |
          set -euo pipefail
          ts=$(date +%s)
          kubectl -n ${{ env.K8S_NAMESPACE }} create job paddle-importer-now-${ts} --from=cronjob/paddle-importer
